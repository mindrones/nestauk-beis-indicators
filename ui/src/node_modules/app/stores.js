import {derived, writable} from 'svelte/store';
import {pairs} from 'd3-array';
import {schemeGnBu, schemeRdYlBu} from 'd3-scale-chromatic';
import {scaleQuantize} from 'd3-scale';
import {linearScale} from 'yootils';
import {
	isIterableNotEmpty,
	makeWithKeys,
	mergeObj,
	negate,
	transformValues,
} from '@svizzle/utils';
import * as _ from 'lamb';

import {lookup, yearExtent} from './data/groups';
import UK_NUTS_1_2 from './data/UK_NUTS_1_2.json';

/* groups */

export const lookupStore = writable(lookup);

/* layout */

export const safetyDefault = {left: 120, right: 80};
export const safetyStore = writable(safetyDefault);
export const resetSafetyStore = () => {
	safetyStore.set(safetyDefault);
}

export const timelineHeightStore = writable(0);
export const timelineWidthStore = writable(0);

export const timelineLayoutStore = derived([
	timelineHeightStore,
	timelineWidthStore,
	safetyStore
], ([height, width, safety]) => {
	const padding = 10;
	const fontSize = Math.min(height / 4, 14);
	const radius = Math.min(height / 8, 7);
	const fullExtent = [
		padding + radius,
		width - padding - radius
	];
	const fullScaleX = linearScale(yearExtent, fullExtent);
	const start = fullExtent[0] + safety.left;
	const end = fullExtent[1] - safety.right;
	const scaleX = linearScale(yearExtent, [start, end]);
	const step = scaleX(start + 1) - scaleX(start);
	const doShortenYears = step < 3 * fontSize;
	const y1 = height / 3;
	const y2 = (height + y1 + radius) / 2;
	const ym = height / 2;

	return {
		doShortenYears,
		end,
		fontSize,
		fullScaleX,
		height,
		radius,
		scaleX,
		start,
		width,
		y1,
		y2,
		ym,
	}
});

/* selection */

export const selectedYearStore = writable();
export const resetSelectedYear = () => {
	selectedYearStore.set();
}

export const availableYearsStore = writable([]);

export const resetSelection = () => {
	availableYearsStore.set([]);
	resetSelectedYear();
};

/* color scale */

const colorSchemes = [
	schemeRdYlBu[8],
	_.tail(schemeGnBu[9]),
];

export const currentSchemeIndexStore = writable(0);

export const currentSchemeStore =
	derived(currentSchemeIndexStore, i => colorSchemes[i]);

export const currentColorScaleStore = derived(
	currentSchemeStore,
	scheme => scaleQuantize().range(scheme)
);

export const makeColorScaleStore = derived(
	currentColorScaleStore,
	colorScale => extent => colorScale.domain(extent)
);

export const makeColorBinsStore = derived([
	currentSchemeStore,
	currentColorScaleStore,
], ([currentScheme, currentColorScale]) =>
	cScale => {
		const domain = cScale.domain();
		const ranges = pairs([domain[0], ...currentColorScale.thresholds(), domain[1]]);

		return _.map(_.zip(ranges, currentScheme), makeWithKeys(['range', 'color']));
	}
);


/* regional selection */

// selected regions

const allNutsSelected =
	_.mapValues(UK_NUTS_1_2, mergeObj({selected: true}));
const noNutsSelected =
	_.mapValues(UK_NUTS_1_2, mergeObj({selected: false}));
export const nutsSelectionStore = writable(allNutsSelected);
export const selectAllRegions = () => {
	nutsSelectionStore.set(allNutsSelected);
};
export const deselectAllRegions = () => {
	nutsSelectionStore.set(noNutsSelected);
};
export const toggleRegionNUTS1 = id => {
	nutsSelectionStore.update(_.updatePath(`${id}.selected`, negate));
};
export const selectRegionNUTS1 = id => {
	nutsSelectionStore.update(_.setPath(`${id}.selected`, true));
};
export const areThereUnselectedNUTS1Regions = derived(nutsSelectionStore, _.pipe([
	_.values,
	_.filterWith(_.pipe([_.getKey('selected'), _.is(false)])),
	isIterableNotEmpty
]));

const getSelectedChildren = _.pipe([
	_.values,
	_.filterWith(_.getKey('selected')),
	_.flatMapWith(_.getKey('children'))
]);
export const selectedNUT2IdsStore = derived(
	[nutsSelectionStore],
	([nutsSelection]) => getSelectedChildren(nutsSelection)
);

// pre-selected regions

const getNUTS1Children = id => UK_NUTS_1_2[id].children;
export const preselectedNUTS1IdStore = writable(null);
export const preselectedNUTS2IdsStore = derived(
	[preselectedNUTS1IdStore],
	([id]) => id && getNUTS1Children(id) || []
);

// modal utils

const hidden = {isVisible: false};
const toggleIsVisible = transformValues({isVisible: negate});

// modal

export const geoModalStore = writable(hidden);
export const hideGeoModal = () => {
	geoModalStore.set(hidden);
};
export const toggleGeoModal = () => {
	geoModalStore.update(toggleIsVisible);
};

// selection mode

export const doFilterRegionsStore = writable(false);

/* info modal */

export const infoModalStore = writable(hidden);
export const hideInfoModal = () => {
	infoModalStore.set(hidden);
};
export const toggleInfoModal = () => {
	infoModalStore.update(toggleIsVisible);
};

/* staging banner */

export const isBannerActiveStore = writable(true);
export const disableBanner = () => {
	isBannerActiveStore.set(false);
};
