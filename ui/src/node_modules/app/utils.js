import {csvParse} from 'd3-dsv';
import {format} from 'd3-format';
import {interpolateWarm} from 'd3-scale-chromatic';
import {scaleQuantize} from 'd3-scale';
import * as _ from 'lamb';
import {
  arrayMax,
  arrayMin,
  inclusiveRange,
  makeArrayTransformer,
  transformValues,
} from '@svizzle/utils';

import {version} from '../../../package.json';
export {version} from '../../../package.json';

/* svizzle */

// obj[] => obj[]
// setIndexAsKey([{a: 2}, {c: 5}]) => [{a: 2, index: 0}, {c: 5, index: 1}]
export const setIndexAsKey = key => _.pipe([
  _.zipWithIndex,
  _.mapWith(([obj, index]) => _.setIn(obj, key, index))
]);

/* assets */

export const zipName = `beis_indicators_${version.replace(/\./ug, '_')}.zip`;
export const zipUrl = `/data/${zipName}`;

/* domain */

export const getNutsId = _.getKey('nuts_id');

export const getYearExtent = _.pipe([
  _.pluck('indicators'),
  _.flatten,
  _.pluck('year_range'),
  _.transpose,
  makeArrayTransformer([arrayMin, arrayMax]),
]); // IDEA just flatten and get the whole extent

export const makeIndicatorsLookup = _.pipe([
  _.pluck('indicators'),
  _.flatten,
  _.indexBy(_.getPath('schema.value.id')),
]);

export const makeValueAccessor = id => _.getKey(id);
export const sortAscByYear = _.sortWith([_.sorter(_.getKey('year'))]);

const sanitizeValue = _id => transformValues({
  [_id]: Number,
  // year: Number
});
export const parseCSV = id =>
  t => csvParse(t, sanitizeValue(id));

// color scale

const steps = inclusiveRange([0, 1, 0.25]);
const colorRange = _.map(steps, interpolateWarm);
const colorScale = scaleQuantize().range(colorRange);

export const makeColorScale = extent => colorScale.domain([0, extent[1]]);

// format

export const getIndicatorFormat = (id, lookup) => _.pipe([
  _.getPath(`${id}.schema.value`),
  _.condition(
    _.hasKey('format'),
    value => format(value.format),
    () => _.identity,
  )
])(lookup);
