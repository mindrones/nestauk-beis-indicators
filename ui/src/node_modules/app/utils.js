import * as _ from 'lamb';
import {format} from 'd3-format';
import {
	arrayMax,
	arrayMin,
	isKeyValue,
	makeArrayTransformer,
	sliceStringAt,
} from '@svizzle/utils';

/* domain */

export const getYearExtent = _.pipe([
	_.pluck('indicators'),
	_.flatten,
	_.pluck('year_extent'),
	_.transpose,
	makeArrayTransformer([arrayMin, arrayMax]),
]); // IDEA just flatten and get the whole extent

export const makeIndicatorsLookup = _.pipe([
	_.pluck('indicators'),
	_.flatten,
	_.indexBy(_.getPath('schema.value.id')),
]);

export const makeValueAccessor = id => _.getKey(id);


/* shared colors */

export const colorSelected = 'lightseagreen'; // --color-selected


/* format */

export const getIndicatorFormat = (id, lookup) => _.pipe([
	_.getPath(`${id}.schema.value`),
	_.adapter([
		_.casus(
			_.allOf([
				isKeyValue(['data_type', 'int']),
				_.hasKey('format'),
			]),
			value => _.pipe([
				Math.round,
				format(value.format)
			])
		),
		_.casus(
			_.allOf([
				isKeyValue(['data_type', 'int']),
				_.not(_.hasKey('format')),
			]),
			() => Math.round
		),
		_.casus(
			_.hasKey('format'),
			value => format(value.format)
		),
		() => _.identity,
	])
])(lookup);

export const getRefFormat = (id, lookup) => _.pipe([
	_.getPath(`${id}.schema.value`),
	_.adapter([
		_.casus(
			_.allOf([
				isKeyValue(['data_type', 'int']),
				_.hasKey('format'),
			]),
			value => _.pipe([
				Math.round,
				format(value.format)
			])
		),
		_.casus(
			isKeyValue(['data_type', 'int']),
			() => Math.round
		),
		_.casus(
			_.hasKey('format'),
			value => format(value.format)
		),
		() => _.identity,
	])
])(lookup);

export const shortenYear = _.pipe([String, sliceStringAt([2, 4])])
